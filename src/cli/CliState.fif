// SPDX-FileCopyrightText: 2019 Serokell <https://serokell.io>
//
// SPDX-License-Identifier: MPL-2.0

library CliState  // The state of the cli tool


"TonUtil.fif" include

"State/GlobalState.fif" include

//
// PaymentsState
//

{ <b
  3 roll 248 u,
  2 roll 248 u,
  1 roll 248 u,
  b>
} : mkPaymentsState
// ( weOwe theyOwe missingAmount -- paymentsState )

{ <b
  4 roll 248 u,
  3 roll 248 u,
  2 roll ref,
  1 roll 248 u,
  b>
} : mkPaymentsStateIou
// ( weOwe theyOwe iou missingAmount -- paymentsState )

{ 0 0 0 mkPaymentsState
} : mkEmptyPaymentsState
// ( -- paymentsState )

{ <s
  248 u@
} : getPaymentsStateWeOwe
// ( paymentsState -- weOwe )

{ <s
  248 u@+ nip
  248 u@
} : getPaymentsStateTheyOwe
// paymentsState -> theyOwe

{ <s ref@?
} : getPaymentsStateIou
// ( paymentsState -- (iou -1 | 0) )

{ <s
  248 u@+ nip
  248 u@+ nip
  248 u@
} : getPaymentsStateMissingAmount
// ( paymentsState -- missingAmount )

{ <s <b swap
  248 u@+ -rot 248 u, swap
  248 u@+ -rot 248 u,
  rot 248 u, swap
  ref@? { ref, } if
  b>
} : setPaymentsStateMissingAmount
// missingAmount paymentsState -> paymentsState'

{ dup
  getPaymentsStateMissingAmount
  rot
  +
  swap setPaymentsStateMissingAmount
} : addPaymentsStateMissingAmount
// ( delta paymentsState -- paymentsState' )


//
// CliState
//

{ <b
  4 roll 4 roll addr,
  2 roll ref,
  1 roll ref,
  b>
} : mkCliState
// ( wc addr globalState paymentsState -- cliState )

{ <s
  8 i@+ 256 u@+
  ref@+ swap
  ref@+ swap
  s>
} : parseCliState
// ( cliState -- wc addr globalState paymentsState )


//
// CliStateNice
//

// TODO: Rename this data type and some others

// data CliStateNice = MkCliStateNice
//   { cliState :: ^CliState
//   , ourKeyName :: ^String
//   , theirKeyName :: ^String
//   }

{ <b
  3 roll ref,
  2 roll $>s sr,
  1 roll $>s sr,
  b>
} : mkCliStateNice
// ( cliState ourPkName theirPkName -- cliStateNice )

{ <s
  ref@+
  ref@+ dup sbits 8 / $@ swap
  ref@+ dup sbits 8 / $@ swap
  s>
} : parseCliStateNice
// ( cliStateNice -- cliState ourPkName theirPkName )

{ addr>hex$' +".state"
  dup file-exists? abort"State file for this channel already exists?!"
  swap 2 boc+>B swap
  dup ."Saving channel state to file `" type ."`" cr B>file
} : saveCliStateNice
// ( cliStateNice wc addr -- )

{
  addr>hex$ +".state"
  file>B
  B>boc
} : loadCliStateNice
// ( wc addr -- cliStateNice )
