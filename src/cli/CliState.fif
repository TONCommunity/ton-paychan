// SPDX-FileCopyrightText: 2019 Serokell <https://serokell.io>
//
// SPDX-License-Identifier: MPL-2.0

library CliState  // The state of the cli tool


"TonUtil.fif" include

"Address.fif" include
"State/GlobalState.fif" include

//
// PaymentsState
//

{ <b
  3 roll 248 u,
  2 roll 248 u,
  1 roll 248 u,
  b>
} : mkPaymentsState
// ( weOwe theyOwe missingAmount -- paymentsState )

{ <b
  4 roll 248 u,
  3 roll 248 u,
  2 roll ref,
  1 roll 248 u,
  b>
} : mkPaymentsStateIou
// ( weOwe theyOwe iou missingAmount -- paymentsState )

{ 0 0 0 mkPaymentsState
} : mkEmptyPaymentsState
// ( -- paymentsState )

{ <s
  248 u@
} : getPaymentsStateWeOwe
// ( paymentsState -- weOwe )

{ <s <b swap
  248 u@+ -rot drop rot 248 u, swap
  248 u@+ -rot 248 u, swap
  248 u@+ -rot 248 u, swap
  ref@? { ref, } if
  b>
} : setPaymentsStateWeOwe
// ( weOwe paymentsState -- paymentsState' )

{ dup
  getPaymentsStateWeOwe
  rot
  +
  swap setPaymentsStateWeOwe
} : addPaymentsStateWeOwe
// ( delta paymentsState -- paymentsState' )

{ <s
  248 u@+ nip
  248 u@
} : getPaymentsStateTheyOwe
// ( paymentsState -- theyOwe )

{ <s <b swap
  248 u@+ -rot 248 u, swap
  248 u@+ -rot drop rot 248 u, swap
  248 u@+ -rot 248 u, swap
  ref@? { ref, } if
  b>
} : setPaymentsStateTheyOwe
// ( theyOwe paymentsState -- paymentsState' )

{ dup
  getPaymentsStateTheyOwe
  rot
  +
  swap setPaymentsStateTheyOwe
} : addPaymentsStateTheyOwe
// ( delta paymentsState -- paymentsState' )

{ <s ref@?
} : getPaymentsStateIou
// ( paymentsState -- (iou -1 | 0) )

{ <s <b swap
  248 u@+ -rot 248 u, swap
  248 u@+ -rot 248 u, swap
  248 u@ 248 u,
  swap ref,
  b>
} : setPaymentsStateIou
// ( iou paymentsState -- paymentsState' )

{ <s
  248 u@+ nip
  248 u@+ nip
  248 u@
} : getPaymentsStateMissingAmount
// ( paymentsState -- missingAmount )

{ <s <b swap
  248 u@+ -rot 248 u, swap
  248 u@+ -rot 248 u,
  rot 248 u, swap
  ref@? { ref, } if
  b>
} : setPaymentsStateMissingAmount
// ( missingAmount paymentsState -- paymentsState' )

{ dup
  getPaymentsStateMissingAmount
  rot
  +
  swap setPaymentsStateMissingAmount
} : addPaymentsStateMissingAmount
// ( delta paymentsState -- paymentsState' )

{ dup getPaymentsStateWeOwe
  swap getPaymentsStateTheyOwe
  -
} : getPaymentsStateBalance
// ( paymentsState -- balance )

{ dup 0> { ."+" } if
  ._
} : .balance
// ( i -- )


//
// CliState
//

{ <b
  4 roll 4 roll addr,
  2 roll ref,
  1 roll ref,
  b>
} : mkCliState
// ( wc addr globalState paymentsState -- cliState )

{ <s
  addr@+
  ref@+ swap
  ref@+ swap
  s>
} : parseCliState
// ( cliState -- wc addr globalState paymentsState )

{ <s
  8 i@+ 256 u@
} : getCliStateAddr
// ( cliState -- wc addr )

{ <s <b swap
  addr@+ 3 -roll addr, swap
  ref@ ref,
  swap ref,
  b>
} : setCliStatePaymentsState
// ( paymentState cliState -- cliState' )


//
// CliStateNice
//

// TODO: Rename this data type and some others

// data CliStateNice = MkCliStateNice
//   { cliState :: ^CliState
//   , ourKeyName :: ^String
//   , theirKeyName :: ^String
//   }

{ <b
  3 roll ref,
  2 roll $>s sr,
  1 roll $>s sr,
  b>
} : mkCliStateNice
// ( cliState ourPkName theirPkName -- cliStateNice )

{ <s
  ref@+ swap
  ref@+ <s dup sbits 8 / $@ swap
  ref@+ <s dup sbits 8 / $@ swap
  s>
} : parseCliStateNice
// ( cliStateNice -- cliState ourPkName theirPkName )

{ <s
  ref@
} : getCliStateNiceCliState
// ( cliStateNice -- cliState )

{ parseCliStateNice
  rot drop
  mkCliStateNice
} : setCliStateNiceCliState
// ( cliState cliStateNice -- cliStateNice' )

{ dup getCliStateNiceCliState getCliStateAddr addr>hex$' +".state"
  swap 2 boc+>B swap
  B>file
} : updateCliStateNice
// ( cliStateNice -- )

{ dup getCliStateNiceCliState getCliStateAddr addr>hex$' +".state"
  dup file-exists? abort"State file for this channel already exists?!"
  swap 2 boc+>B swap
  dup ."Saving channel state to file `" type ."`" cr B>file
} : saveCliStateNice
// ( cliStateNice -- )

{ addr>hex$' +".state"
  dup file-exists? not abort"State file for this channel does not exist"
  file>B
  B>boc
} : loadCliStateNice
// ( wc addr -- cliStateNice )

{ parseCliStateNice
  swap ."Keys: " type ." - " type cr

  parseCliState
  swap
  parseGlobalState
  drop
  ."Shares: " 3 roll ._ ." - " 2 roll ._ cr
  1 roll ."Timeout: " ._ ." (fine: " ._ .")" cr
  cr
  drop drop
  dup dup getPaymentsStateTheyOwe swap dup getPaymentsStateWeOwe
  swap getPaymentsStateBalance ."Balance: " .balance ." (" ._ ." - " ._ .")" cr
  getPaymentsStateMissingAmount ."Missing: " ._ cr
  drop drop
} : .cliStateNice
// ( cliStateNice -- )
