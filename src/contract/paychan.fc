;; SPDX-FileCopyrightText: 2019 Serokell <https://serokell.io>
;;
;; SPDX-License-Identifier: MPL-2.0

() recv_external (slice in_msg) impure {
 ;; ignore all external messages
}

;; slice is input in ton/crypto/smartcont/wallet-code.fc
() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
  if (flags & 1) {
    ;; ignore all bounced messages
    return ();
  }

  ;; need comments in simple transfer message

  var msg_src_addr = cs~load_msg_addr();
  var op = in_msg.preload_uint(32);
  var (globalState, localState) = getState();

  if (op == ReqOp::SimpleTransfer()) {
    return ();
  } elseif (op == ReqOp::Join()) {
    var (msg_pk, _) = parseRawReq(in_msg, globalState);
    var newLocalState =
      handle_join(
        msg_src_addr,
        msg_value,
        msg_pk,
        globalState,
        localState
        );
    putLocalState(newLocalState);
  } elseif (op == ReqOp::Close()) {
    var (msg_pk, closeReq) = parseRawReq(in_msg, globalState);
    var newLocalState =
      handle_close(msg_pk, closeReq, globalState, localState);
    putLocalState(newLocalState);
  } elseif (op == ReqOp::Timeout()) {
    var (msg_pk, _) = parseRawReq(in_msg, globalState);
    var newLocalState =
      handle_timeout(msg_pk, globalState, localState);
    putLocalState(newLocalState);
  } else {
    throw(UnknownReqOp());
  }
}

_ globalState() method_id {
  var (globalState, localState) = getState();
  return parseGlobalState(globalState);
}
